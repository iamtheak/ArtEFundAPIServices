// <auto-generated />
using System;
using ArtEFundAPIServices.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtEFundAPIServices.Data.DbMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227081003_Change_memershipname_property")]
    partial class Change_memershipname_property
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.ContentTypeModel", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTypeId"));

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.CreatorModel", b =>
                {
                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatorId"));

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorBanner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorBio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatorDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CreatorGoal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CreatorId");

                    b.HasIndex("ContentTypeId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.DonationModel", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DonationAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.EnrolledMembershipModel", b =>
                {
                    b.Property<int>("EnrolledMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrolledMembershipId"));

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EnrolledMembershipId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.ToTable("EnrolledMembershipModels");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.FollowModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CreatorId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.GoalModel", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("GoalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GoalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GoalProgress")
                        .HasColumnType("real");

                    b.Property<bool>("IsGoalActve")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoalReached")
                        .HasColumnType("bit");

                    b.HasKey("GoalId");

                    b.HasIndex("CreatorId");

                    b.ToTable("GoalModel");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.MembershipModel", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("MembershipAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MembershipBenifits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MembershipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembershipTier")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.RefreshTokenModel", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelUserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "user"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "creator"
                        });
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            UserTypeName = "credentials"
                        },
                        new
                        {
                            UserTypeId = 2,
                            UserTypeName = "google"
                        });
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.CreatorModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.ContentTypeModel", "ContentType")
                        .WithOne()
                        .HasForeignKey("ArtEFundAPIServices.Data.Model.CreatorModel", "ContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArtEFundAPIServices.Data.Model.UserModel", "UserModel")
                        .WithOne()
                        .HasForeignKey("ArtEFundAPIServices.Data.Model.CreatorModel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.DonationModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.CreatorModel", "Creator")
                        .WithMany("Donations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.EnrolledMembershipModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.MembershipModel", "Membership")
                        .WithMany("EnrolledMemberships")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtEFundAPIServices.Data.Model.UserModel", "User")
                        .WithMany("EnrolledMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.FollowModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.CreatorModel", "Creator")
                        .WithMany("Followers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtEFundAPIServices.Data.Model.UserModel", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.GoalModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.CreatorModel", null)
                        .WithMany("Goals")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.MembershipModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.CreatorModel", "Creator")
                        .WithMany("Memberships")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.RefreshTokenModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.UserModel", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserModelUserId");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.UserModel", b =>
                {
                    b.HasOne("ArtEFundAPIServices.Data.Model.RoleModel", "RoleModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtEFundAPIServices.Data.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleModel");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.CreatorModel", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Followers");

                    b.Navigation("Goals");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.MembershipModel", b =>
                {
                    b.Navigation("EnrolledMemberships");
                });

            modelBuilder.Entity("ArtEFundAPIServices.Data.Model.UserModel", b =>
                {
                    b.Navigation("EnrolledMemberships");

                    b.Navigation("Followings");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
